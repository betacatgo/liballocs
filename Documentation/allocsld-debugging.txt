allocsld.so is implemented as a 'chain loader' which secretly loads the
'real' dynamic linker and gets it to link the program.

All this has the capacity to really confuse a debugger. A debugger
attached to allocsld.so would not know /a priori/ anything about other
binaries that get loaded.

Debuggers learn about dynamically linked libraries by finding a 'struct
r_debug' instance pointed to by the DT_DEBUG entry of the executable's
.dynamic section (or by a symbol named _r_debug).

So the short summary is that we give allocsld.so such a DT_DEBUG entry,
but point it at the 'struct r_debug' in the *real* dynamic linker. That
way, if a debugger looks in allocsld.so, thinking it the executable, it
will find the real link map.

It's not quite that easy. A debugger looking for a DT_DEBUG will also
expect to find a _dl_debug_state() function in the same binary (actually
it can have several names; see allocsld/chain.c). This is a no-op
function on which the debugger secretly sets a breakpoint; the dynamic
linker calls it whenever it loads or unloads something, so the debugger
can stay aware. In our case, the 'real' dynamic linker is doing all the
work and will happily call its own _dl_debug_state function, but the
debugger will not know to set a breakpoint on it because it might look
only in the DT_DEBUG-defining library. We have no choice but to define
our own _dl_debug_state function, overriding the dynamic linker's. (It
appears gdb is wrong to behave this way. A comment in glibc's dl-debug.c
attests: "The debugger is supposed to find this function's address by
examining the r_brk member of struct r_debug, but GDB 4.15 in fact looks
for this particular symbol name in the PT_INTERP file.")

And there is yet one more complication. Does this overriding work?
Unfortunately: no! Although _dl_debug_state has default (global)
visibility so appears subject to overriding, glibc's dynamic linker
seems to make internal calls to it which are not overridden. Even if we
could override it, there is still the risk that a debugger somehow does
find the 'real' dynamic linker and set a breakpoint instead on *its*
_dl_debug_state. (This can happen if the debugger is attached late,
given sufficiently good 'track-covering' by the chain loader.) So we
have to make sure that calling glibc's calls ours. We do this by
exploiting that functions have 16-byte alignment on x86-64, so we have
16 bytes to play with. We make the glibc's _dl_debug_state tail-call
(jump) into ours. Our function is empty and just returns to the caller.
